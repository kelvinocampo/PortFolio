import { useState, useEffect } from 'react';
import data from '@/data/data.json';

const experienceData = data.experience;

function countTechnologies(experience) {
  return new Set(experience.flatMap(job => job.technologies)).size;
}

const usedTechnologies = countTechnologies(experienceData);

const useIntersectionObserver = (options = {}) => {
  const [isIntersecting, setIsIntersecting] = useState(false);
  const [element, setElement] = useState(null);

  useEffect(() => {
    if (!element) return;

    const observer = new IntersectionObserver(
      ([entry]) => setIsIntersecting(entry.isIntersecting),
      { threshold: 0.1, ...options }
    );

    observer.observe(element);
    return () => observer.disconnect();
  }, [element, options.root, options.threshold, options.rootMargin]);

  return { ref: setElement, isIntersecting };
};

const StatCard = ({ value, label }) => (
  <div className="text-center p-4 sm:p-6 bg-[#112240]/50 rounded-xl border border-gray-700/30 hover:border-[#64FFDA]/50 transition-all duration-300">
    <h3 className="text-2xl sm:text-3xl font-bold text-[#64FFDA] mb-1 sm:mb-2">{value}</h3>
    <p className="text-sm sm:text-base text-gray-300">{label}</p>
  </div>
);

const ExperienceCard = ({ experience, index, isVisible }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const isLeft = index % 2 === 0;

  return (
    <div
      className={`
        relative mb-8 sm:mb-12 lg:mb-16 group
        ${isVisible ? 'animate-slide-in' : 'opacity-0'}
      `}
      style={{ animationDelay: `${index * 150}ms` }}
    >
      {/* Mobile: Simple vertical layout */}
      <div className="lg:hidden">
        <div className="relative pl-8">
          {/* Mobile timeline */}
          <div className="absolute left-0 top-0 bottom-0 w-px bg-gradient-to-b from-[#64FFDA] via-[#64FFDA]/50 to-[#64FFDA]/20"></div>
          <div className="absolute left-[-3px] top-8 w-2 h-2 bg-[#64FFDA] rounded-full border-2 border-[#0A192F] shadow-lg shadow-[#64FFDA]/50"></div>

          {/* Card content */}
          <div className="bg-[#112240] rounded-lg p-4 sm:p-5 border border-gray-700/30 hover:border-[#64FFDA]/50 transition-all duration-300">
            <div className="flex items-start gap-3 mb-3">
              <span className="text-3xl sm:text-4xl flex-shrink-0">{experience.logo}</span>
              <div className="flex-1 min-w-0">
                <h3 className="text-lg sm:text-xl font-bold text-white mb-1">{experience.position}</h3>
                <p className="text-[#64FFDA] font-semibold text-sm sm:text-base">{experience.company}</p>
                <span className={`inline-block mt-2 px-2 py-1 rounded-full text-xs font-medium
                  ${experience.type === 'Tiempo Completo' ? 'bg-green-500/20 text-green-300' :
                    experience.type === 'Freelance' ? 'bg-blue-500/20 text-blue-300' :
                    'bg-purple-500/20 text-purple-300'}`}>
                  {experience.type}
                </span>
              </div>
            </div>

            <div className="flex flex-col gap-1 text-xs sm:text-sm text-gray-400 mb-3">
              <span>üìÖ {experience.period}</span>
              <span>üìç {experience.location}</span>
            </div>

            <p className="text-sm sm:text-base text-gray-300 mb-3 leading-relaxed">{experience.description}</p>

            <div className="flex flex-wrap gap-1.5 mb-3">
              {experience.technologies.map((tech) => (
                <span key={`${experience.id}-${tech}`} 
                  className="px-2 py-1 bg-[#64FFDA]/10 text-[#64FFDA] rounded-full text-xs font-medium border border-[#64FFDA]/30">
                  {tech}
                </span>
              ))}
            </div>

            <button onClick={() => setIsExpanded(!isExpanded)}
              className="flex items-center text-[#64FFDA] hover:text-white transition-colors font-medium text-sm mb-2">
              <span className="mr-2">{isExpanded ? 'üìñ' : 'üèÜ'}</span>
              {isExpanded ? 'Ocultar logros' : 'Ver logros'}
              <span className={`ml-2 transform transition-transform text-xs ${isExpanded ? 'rotate-180' : ''}`}>‚ñº</span>
            </button>

            <div className={`overflow-hidden transition-all duration-300 ${isExpanded ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}>
              <ul className="space-y-1.5 pl-3">
                {experience.achievements.map((achievement, idx) => (
                  <li key={`${experience.id}-achievement-${idx}`} className="text-gray-300 text-xs sm:text-sm flex items-start">
                    <span className="text-[#64FFDA] mr-2 mt-1">‚Ä¢</span>
                    <span>{achievement}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      {/* Desktop: Timeline zigzag layout */}
      <div className="hidden lg:flex lg:items-center">
        <div className="absolute left-1/2 transform -translate-x-1/2 w-px h-full bg-gradient-to-b from-[#64FFDA]/50 to-transparent"></div>
        <div className="absolute left-1/2 transform -translate-x-1/2 w-4 h-4 bg-[#64FFDA] rounded-full border-4 border-[#0A192F] z-10 group-hover:scale-125 transition-transform shadow-lg shadow-[#64FFDA]/50"></div>

        <div className={`w-5/12 ${isLeft ? 'pr-12' : 'ml-auto pl-12'}`}>
          <div className="bg-[#112240] rounded-xl p-6 border border-gray-700/30 hover:border-[#64FFDA]/50 transition-all duration-300 hover:shadow-xl hover:shadow-[#64FFDA]/10 group-hover:scale-105">
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center gap-3 flex-1">
                <span className="text-3xl">{experience.logo}</span>
                <div>
                  <h3 className="text-xl font-bold text-white group-hover:text-[#64FFDA] transition-colors">{experience.position}</h3>
                  <p className="text-[#64FFDA] font-semibold">{experience.company}</p>
                </div>
              </div>
              <span className={`px-3 py-1 rounded-full text-xs font-medium
                ${experience.type === 'Tiempo Completo' ? 'bg-green-500/20 text-green-300' :
                  experience.type === 'Freelance' ? 'bg-blue-500/20 text-blue-300' :
                  'bg-purple-500/20 text-purple-300'}`}>
                {experience.type}
              </span>
            </div>

            <div className="flex flex-wrap gap-4 text-sm text-gray-400 mb-4">
              <span>üìÖ {experience.period}</span>
              <span>üìç {experience.location}</span>
            </div>

            <p className="text-gray-300 mb-4 leading-relaxed">{experience.description}</p>

            <div className="flex flex-wrap gap-2 mb-4">
              {experience.technologies.map((tech) => (
                <span key={`${experience.id}-${tech}`}
                  className="px-3 py-1 bg-[#64FFDA]/10 text-[#64FFDA] rounded-full text-xs font-medium border border-[#64FFDA]/30">
                  {tech}
                </span>
              ))}
            </div>

            <button onClick={() => setIsExpanded(!isExpanded)}
              className="flex items-center text-[#64FFDA] hover:text-white transition-colors font-medium mb-2">
              <span className="mr-2">{isExpanded ? 'üìñ' : 'üèÜ'}</span>
              {isExpanded ? 'Ocultar logros' : 'Ver logros'}
              <span className={`ml-2 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`}>‚ñº</span>
            </button>

            <div className={`overflow-hidden transition-all duration-300 ${isExpanded ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}>
              <ul className="space-y-2 pl-4">
                {experience.achievements.map((achievement, idx) => (
                  <li key={`${experience.id}-achievement-${idx}`} className="text-gray-300 text-sm flex items-start">
                    <span className="text-[#64FFDA] mr-3 mt-1">‚Ä¢</span>
                    {achievement}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export const Experience = () => {
  const { ref: headerRef, isIntersecting: headerIsVisible } = useIntersectionObserver();
  const { ref: timelineRef, isIntersecting: timelineIsVisible } = useIntersectionObserver();
  
  const [showAll, setShowAll] = useState(false);
  
  // Mostrar los √∫ltimos 3 por defecto
  const displayedExperiences = showAll ? experienceData : experienceData.slice(-3);
  const hasMoreThanThree = experienceData.length > 3;

  return (
    <section id="experience" className="w-full bg-[#0A192F] text-gray-300 py-12 sm:py-16 lg:py-20 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div ref={headerRef} className="text-center mb-12 sm:mb-16">
          <p className={`text-[#64FFDA] text-xs sm:text-sm uppercase tracking-widest mb-2 font-mono ${headerIsVisible ? 'animate-fade-in' : 'opacity-0'}`}>
            Mi Trayectoria
          </p>
          <h2 className={`text-3xl sm:text-4xl lg:text-5xl font-bold text-white mb-4 ${headerIsVisible ? 'animate-slide-up' : 'opacity-0'}`}>
            Experiencia Profesional
          </h2>
          <div className={`w-16 sm:w-20 h-1 bg-[#64FFDA] mx-auto rounded-full mb-6 ${headerIsVisible ? 'animate-expand' : 'opacity-0 scale-x-0'}`}></div>
          <p className={`text-sm sm:text-base lg:text-lg text-gray-400 max-w-2xl mx-auto px-4 ${headerIsVisible ? 'animate-slide-up' : 'opacity-0'}`}>
            Un recorrido por mi desarrollo profesional y los proyectos que han marcado mi carrera
          </p>
        </div>

        {/* Timeline */}
        <div ref={timelineRef} className="relative">
          <div className="hidden lg:block absolute left-1/2 transform -translate-x-1/2 w-px h-full bg-gradient-to-b from-[#64FFDA] via-[#64FFDA]/50 to-transparent"></div>
          {displayedExperiences.map((experience, index) => (
            <ExperienceCard key={experience.id} experience={experience} index={index} isVisible={timelineIsVisible} />
          ))}
        </div>

        {/* Show More/Less Button */}
        {hasMoreThanThree && (
          <div className="flex justify-center mt-8 mb-12">
            <button
              onClick={() => setShowAll(!showAll)}
              className="px-6 py-3 bg-[#64FFDA]/10 hover:bg-[#64FFDA]/20 text-[#64FFDA] rounded-lg font-medium transition-all duration-300 border border-[#64FFDA]/30 hover:border-[#64FFDA]/50 flex items-center gap-2"
            >
              {showAll ? (
                <>
                  <span>Mostrar menos</span>
                  <span className="transform rotate-180">‚ñº</span>
                </>
              ) : (
                <>
                  <span>Ver todas las experiencias ({experienceData.length})</span>
                  <span>‚ñº</span>
                </>
              )}
            </button>
          </div>
        )}

        {/* Stats */}
        <div className={`mt-12 sm:mt-16 grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 ${timelineIsVisible ? 'animate-slide-up' : 'opacity-0'}`}>
          <StatCard value={data.info.years_worked} label="A√±os de experiencia" />
          <StatCard value={data.info.proyects_completed} label="Proyectos completados" />
          <StatCard value={data.info.companies} label="Empresas" />
          <StatCard value={usedTechnologies} label="Tecnolog√≠as" />
        </div>
      </div>

      <style jsx>{`
        @keyframes slide-in {
          from { opacity: 0; transform: translateY(30px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fade-in {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        @keyframes slide-up {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes expand {
          from { opacity: 0; transform: scaleX(0); }
          to { opacity: 1; transform: scaleX(1); }
        }
        .animate-slide-in { animation: slide-in 0.6s ease-out forwards; }
        .animate-fade-in { animation: fade-in 0.6s ease-out forwards; }
        .animate-slide-up { animation: slide-up 0.6s ease-out forwards; }
        .animate-expand { animation: expand 0.6s ease-out forwards; }
      `}</style>
    </section>
  );
}